{"version":3,"sources":["utils/utils.js","components/Test/InfoModal.js","components/Test/index.js","App.js","serviceWorker.js","store/index.js","components/Test/store.js","index.js"],"names":["valueObjToObj","obj","target","_arr3","Object","entries","_i3","length","_ref6","_ref5","slicedToArray","key","value","FormItem","es_form","Item","Option","es_select","form","create","onFieldsChange","props","changedFields","testStore","mapPropsToFields","_arr","_i","_ref3","_ref2","createFormField","createFormItemObj","infoFields","InfoModal","inject","observer","close","_this","setStore","showInfoModal","save","validateFieldsAndScroll","err","values","_this$props","this","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","react_default","a","createElement","modal","onOk","width","onCancel","visible","title","row","col","assign","label","rules","required","message","input","placeholder","pattern","date_picker","style","React","Component","Test","open","openInfoModal","remove","id","removeRecord","edit","record","getInfoList","_this2","_this$props$testStore","infoList","columns","dataIndex","align","render","text","styles","test","onClick","icon","type","divider","margin","textAlign","marginBottom","es_button","table","rowKey","dataSource","bordered","Test_InfoModal","color","cursor","App","className","components_Test","Boolean","window","location","hostname","match","store","TestStore","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","addRecord","slice","info","birth","format","uuid","unshift","editRecord","index","findIndex","item","splice","name","age","gender","phone","address","editId","observable","action","prototype","toString","call","localStorage","getItem","JSON","parse","_this3","_this4","_arr2","keys","_i2","clearFields","objectSpread","_arr4","_i4","_ref9","_ref8","objToValueObj","moment","fields","_this5","confirm","content","okType","_this6","filter","setItem","stringify","_this7","success","ReactDOM","index_module","locale_provider","locale","zh_CN","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edcac3ff.chunk.js","sourcesContent":["import { Form } from 'antd'\n\n/**\n * 创建FormItem回显到表单的对象\n * @param obj\n * @returns {{}}\n */\nexport function createFormItemObj (obj) {\n    let target = {}\n    for (let [key, value] of Object.entries(obj)) {\n        target[key] = Form.createFormField(value)\n    }\n    return target\n}\n\n/**\n * 清空对象\n * @param obj\n * @returns {{}}\n */\nexport function clearFields (obj) {\n    let target = {}\n    for (let key of Object.keys(obj)) {\n        target[key] = {}\n    }\n    return target\n}\n\n/**\n * { test:{value} } ==> {test:value}\n */\nexport function valueObjToObj (obj) {\n    let target = {}\n    for (let [key, value] of Object.entries(obj)) {\n        target[key] = value.value\n    }\n    return target\n}\n\n/**\n *  {test:value} ==> {test:{value}}\n * @param obj\n * @returns {{}}\n */\nexport function objToValueObj (obj) {\n    let target = {}\n    for (let [key, value] of Object.entries(obj)) {\n        target[key] = {value}\n    }\n    return target\n}","import React from 'react'\nimport { Modal, Form, Row, Col, Input, DatePicker, Select } from 'antd'\nimport { inject, observer } from 'mobx-react'\nimport { createFormItemObj } from '@/utils/utils'\n\nconst FormItem = Form.Item\nconst Option = Select.Option\n\nconst form = Form.create({\n    onFieldsChange (props, changedFields) {\n        props.testStore.onFieldsChange(changedFields, 'infoFields')\n    },\n    mapPropsToFields (props) {\n        return createFormItemObj(props.testStore.infoFields)\n    },\n})\n\n@inject('testStore') @form @observer\nclass InfoModal extends React.Component {\n\n    close = () => {\n        this.props.testStore.setStore({\n            showInfoModal: false\n        })\n    }\n    save = ()=>{\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                this.props.testStore.save()\n            }\n        })\n    }\n\n    render () {\n        const {testStore, form} = this.props\n        const {showInfoModal} = testStore\n        const {getFieldDecorator} = form\n\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 6},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 16},\n            },\n        }\n\n        return (\n            <Modal\n                onOk={this.save}\n                width={800}\n                onCancel={this.close}\n                visible={showInfoModal}\n                title={'详细信息'}>\n                <Form>\n                    <Row>\n                        <Col span={12}>\n                            <FormItem label={'姓名'} {...formItemLayout}>\n                                {getFieldDecorator('name', {\n                                    rules: [{required: true, message: '请输入姓名'}],\n                                })(<Input placeholder={'请输入姓名'}/>)}\n                            </FormItem>\n                        </Col>\n                        <Col span={12}>\n                            <FormItem label={'年龄'} {...formItemLayout}>\n                                {getFieldDecorator('age', {\n                                    rules: [\n                                        {required: true, message: '请输入年龄'},\n                                        {pattern: /^[0-9]*$/, message: '请输入正确的年龄'}\n                                    ],\n\n                                })(<Input placeholder={'请输入年龄'}/>)}\n                            </FormItem>\n                        </Col>\n                        <Col span={12}>\n                            <FormItem label={'出生年月日'} {...formItemLayout}>\n                                {getFieldDecorator('birth', {\n                                    rules: [{required: true, message: '请选择出生日期'}],\n                                })(<DatePicker style={{width: '100%'}}/>)}\n                            </FormItem>\n                        </Col>\n                        <Col span={12}>\n                            <FormItem label={'性别'} {...formItemLayout}>\n                                {getFieldDecorator('gender', {\n                                    rules: [{required: true, message: '请选择性别'}],\n                                })(<Select placeholder={'请选择性别'} style={{width: '50%'}}>\n                                    <Option value={'男'}>男</Option>\n                                    <Option value={'女'}>女</Option>\n                                </Select>)}\n                            </FormItem>\n                        </Col>\n                        <Col span={12}>\n                            <FormItem label={'电话'} {...formItemLayout}>\n                                {getFieldDecorator('phone', {})(<Input placeholder={'请输入电话'}/>)}\n                            </FormItem>\n                        </Col>\n                        <Col span={12}>\n                            <FormItem label={'家庭地址'} {...formItemLayout}>\n                                {getFieldDecorator('address', {})(<Input placeholder={'请输入家庭地址'}/>)}\n                            </FormItem>\n                        </Col>\n                    </Row>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default InfoModal","import React from 'react'\nimport { Button,Table,Icon,Divider} from 'antd'\nimport {inject,observer} from 'mobx-react'\nimport InfoModal from './InfoModal'\n\n@inject('testStore')  @observer\nclass Test extends React.Component{\n\n    componentDidMount(){\n        this.props.testStore.getInfoList()\n    }\n\n    open = ()=>{\n        this.props.testStore.openInfoModal()\n    }\n\n    remove = (id)=>{\n        this.props.testStore.removeRecord(id)\n    }\n    edit = (record)=>{\n        this.props.testStore.openInfoModal(record)\n    }\n\n    render(){\n        const {infoFields,infoList} = this.props.testStore\n        const columns = [\n            {title:'姓名',dataIndex:'name',align:'center'},\n            {title:'年龄',dataIndex:'age',align:'center'},\n            {title:'性别',dataIndex:'gender',align:'center'},\n            {title:'出生日期',dataIndex:'birth',align:'center'},\n            {title:'电话',dataIndex:'phone',align:'center'},\n            {title:'操作',dataIndex:'action',align:'center',render:(text,record)=><div>\n                <span style={styles.test} onClick={()=>this.edit(record)}><Icon type={'edit'}/> 编辑</span>\n                <Divider type={'vertical'}/>\n                <span style={styles.test} onClick={()=>this.remove(record.id)}><Icon type={'delete'}/> 删除</span>\n            </div>},\n        ]\n        return (\n            <div style={{width:800,margin:'100px auto'}}>\n                <div style={{textAlign:'right',marginBottom:10}}>\n                    <Button icon={'plus'} type={'primary'} onClick={this.open}>新增</Button>\n                </div>\n                <Table\n                    rowKey={'id'}\n                    dataSource={infoList}\n                    columns={columns}\n                    bordered/>\n                {/*这里传递一个props主要是为了触发mapPropsToFields*/}\n                <InfoModal infoFields={infoFields}/>\n            </div>\n        )\n    }\n}\n\nconst styles = {\n    test:{\n        color: '#1890ff',\n        cursor: 'pointer'\n    }\n}\n\nexport default Test","import React, { Component } from 'react';\nimport './App.css';\nimport Test from './components/Test/index'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Test/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import testStore from '../components/Test/store'\n\nconst store = {\n    testStore\n}\n\nexport default store","import { observable, action } from 'mobx'\nimport { clearFields, valueObjToObj, objToValueObj } from '@/utils/utils'\nimport { Modal,message } from 'antd'\nimport uuid from 'uuid/v4'\nimport moment from 'moment'\n\nclass TestStore {\n    @observable showInfoModal //显示弹框\n    @observable infoFields   //信息\n    @observable infoList    //信息列表\n    @observable editId     //编辑的ID\n\n    constructor () {\n        this.showInfoModal = false\n        this.infoFields = {\n            name: {},\n            age: {},\n            birth: {},\n            gender: {},\n            phone: {},\n            address: {}\n        }\n        this.infoList = []\n        this.editId = ''\n    }\n\n    /**\n     * 设置store对象，类似react的setState\n     * @param obj\n     */\n    @action\n    setStore = (obj) => {\n        if (Object.prototype.toString.call(obj) === '[object Object]') {\n            for (let [key, value] of Object.entries(obj)) {\n                this[key] = value\n            }\n        }\n    }\n\n    /**\n     * 获取infoList\n     */\n    @action\n    getInfoList = () => {\n        const infoList = localStorage.getItem('infoList') ? JSON.parse(localStorage.getItem('infoList')) : []\n        this.infoList = infoList\n    }\n\n    /**\n     * 打开编辑的弹框\n     * @param record\n     */\n    @action\n    openInfoModal = (record) => {\n        this.infoFields = clearFields(this.infoFields)\n        if (record) {\n            //回显\n            this.infoFields = {\n                ...objToValueObj(record),\n                birth: {value: moment(record.birth)}\n            }\n        }\n        this.editId = record && record.id\n        this.showInfoModal = true\n    }\n\n    /**\n     * 表单变化绑值到store中\n     * @param changedFields    变化的表单值\n     * @param fields          绑定到store的哪一个值上\n     */\n    @action\n    onFieldsChange = (changedFields, fields) => {\n        this[fields] = {...this[fields], ...changedFields}\n    }\n\n    /**\n     * 删除一条记录\n     * @param id\n     */\n    @action\n    removeRecord = (id) => {\n        Modal.confirm({\n            title: '提示',\n            content: '确认删除当前记录吗',\n            okType: 'danger',\n            onOk: () => {\n                let infoList = this.infoList.filter(item => item.id !== id)\n                localStorage.setItem('infoList', JSON.stringify(infoList))\n                this.getInfoList()\n            }\n        })\n    }\n\n    /**\n     * 弹框的确定按钮\n     */\n    @action\n    save = () => {\n        let infoList = []\n        if (this.editId) {\n            infoList = this.editRecord(this.editId)\n        } else {\n            infoList = this.addRecord()\n        }\n        localStorage.setItem('infoList', JSON.stringify(infoList))\n        this.getInfoList()\n        this.showInfoModal = false\n        message.success(this.editId ? '编辑成功' : '创建成功')\n    }\n    /**\n     * 添加一条记录\n     */\n    addRecord = () => {\n        let infoList = this.infoList.slice()\n\n        let info = valueObjToObj(this.infoFields)\n        info.birth = info.birth && info.birth.format('YYYY-MM-DD')   //处理日期\n        info.id = uuid()  //构造数据id\n\n        infoList.unshift(info)\n        return infoList\n    }\n    /**\n     * 修改数组中的某一项\n     * @param id   要修改的id\n     */\n    editRecord = (id) => {\n        let infoList = this.infoList.slice()\n        const index = infoList.findIndex(item => item.id === id)\n\n        let info = valueObjToObj(this.infoFields)\n        info.birth = info.birth && info.birth.format('YYYY-MM-DD')   //处理日期\n\n        infoList.splice(index, 1, info)  //替换\n        return infoList\n    }\n}\n\nexport default new TestStore()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'mobx-react'\nimport store from './store/index'\nimport { LocaleProvider } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport 'moment/locale/zh-cn';\n\nReactDOM.render(\n    <Provider {...store}>\n        <LocaleProvider locale={zh_CN}>\n            <App />\n        </LocaleProvider>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}